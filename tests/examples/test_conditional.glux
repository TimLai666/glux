// 測試三元運算符和新的 spawn/await 用法

// 測試基本三元運算符
x := 10
result := x > 5 ? 100 : 200
println(`三元運算符測試：${result}`)  // 應該輸出 100

// 測試嵌套三元運算符
y := 7
nested := x > 5 ? (y > 5 ? "xy都大於5" : "x大於5但y不大於5") : "x不大於5"
println(`嵌套三元運算符測試：${nested}`)  // 應該輸出 "xy都大於5"

// 測試三元運算符與計算結合
calc := x > 5 ? x + y : x - y
println(`三元運算符計算結果：${calc}`)  // 應該輸出 17

// 定義測試併發用的函數
fn get_number() -> int {
  println("開始計算數字...")
  sleep(0.5)  // 模擬耗時操作
  println("數字計算完成")
  return 42
}

fn get_message() -> string {
  println("開始準備消息...")
  sleep(0.3)  // 模擬耗時操作
  println("消息準備完成")
  return "Hello, World!"
}

// 測試新的 spawn 和 await 用法
println("測試新的併發模型...")

// 單一任務的 spawn 和 await
println("啟動單一併發任務...")
task1_result := await spawn get_number()
println(`單一任務結果：${task1_result}`)  // 應該輸出 42

// 多任務的 spawn 和 await
println("啟動多個併發任務...")
results := await spawn get_number(), spawn get_message()
println(`多任務結果 - 數字：${results.0}`)  // 應該輸出 42
println(`多任務結果 - 消息：${results.1}`)  // 應該輸出 "Hello, World!"

// 結合三元運算符和併發結果
message := results.0 > 40 ? `數字大於40：${results.0}` : `數字不大於40：${results.0}`
println(message)  // 應該輸出 "數字大於40：42"

println("測試完成！") 