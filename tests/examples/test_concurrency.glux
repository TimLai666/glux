// 定義函數
fn task1() {
    println("任務 1 開始")
    sleep(2)
    println("任務 1 結束")
}

fn task2() {
    println("任務 2 開始")
    sleep(1)
    println("任務 2 結束")
}

fn fetch_data(id: int) -> string {
    sleep(1)
    return `數據 ${id}`
}

fn process_data(data: string) -> string {
    sleep(1)
    return `處理後數據: ${data}`
}

fn workflow() -> string {
    // 先獲取任務
    task := spawn fetch_data(3)
    data := await task()
    // 再處理數據
    proc_task := spawn process_data(data)
    return await proc_task()
}

fn slow_add(a: int, b: int) -> int {
    // 模擬耗時計算
    sleep(1000)  // 休眠1秒
    return a + b
}

fn slow_multiply(a: int, b: int) -> int {
    // 模擬耗時計算
    sleep(1500)  // 休眠1.5秒
    return a * b
}

fn calculate_sum(data: []int) -> int {
    // 模擬耗時操作
    sleep(500)
    
    sum := 0
    for value in data {
        sum += value
    }
    return sum
}

fn process_data_parallel(data: []int) -> int {
    if len(data) == 0 {
        return 0
    }
    
    // 將數據分成兩部分
    middle := len(data) / 2
    left := data[0:middle]
    right := data[middle:len(data)]
    
    // 並行處理兩部分
    left_sum := spawn calculate_sum(left)
    right_sum := spawn calculate_sum(right)
    
    // 等待處理完成
    await left_sum(), right_sum()
    
    // 合併結果
    return left_sum + right_sum
}

fn transform_data(items: []int, transformer: fn(int) -> int) -> []int {
    results := []int{ len: len(items) }  // 預分配陣列
    tasks := []fn() -> int{ len: len(items) }
    
    // 為每個元素建立一個任務
    for i, item in items {
        // 閉包捕獲索引和元素
        local_i := i
        local_item := item
        
        tasks[i] = spawn fn() -> int {
            result := transformer(local_item)
            results[local_i] = result
            return 0
        }
    }
    
    // 等待所有任務完成
    for task in tasks {
        await task()
    }
    
    return results
}

fn double(x: int) -> int {
    sleep(100)  // 模擬耗時操作
    return x * 2
}

fn risky_task(n: int) -> union<int, error> {
    sleep(500)
    if n < 0 {
        return error("不支持負數")
    }
    return n * n
}

// 主函數包含測試邏輯
fn main() {
    // 基本併發
    spawn task1()
    spawn task2()

    println("等待任務完成...")
    await task1(), task2()
    println("所有任務已完成")

    // 併發回傳值
    // 單一 await
    data := await fetch_data(42)
    println(data)

    // 多個 await
    // 先定義任務
    task_a := spawn fetch_data(1)
    task_b := spawn fetch_data(2)
    // 等待任務完成
    result1, result2 := await task_a(), task_b()
    println(`結果 1: ${result1}, 結果 2: ${result2}`)

    // 組合 await
    final_result := await workflow()
    println(`最終結果: ${final_result}`)

    // 測試Glux的並行計算功能
    println("開始並行計算...")

    // 並行執行兩個耗時的計算
    task1 := spawn slow_add(10, 20)
    task2 := spawn slow_multiply(5, 7)

    // 等待任務完成並獲取結果
    await task1(), task2()

    println(`加法結果: ${task1}`)
    println(`乘法結果: ${task2}`)

    // 等待所有任務完成所需時間應該接近最慢任務的時間（約1.5秒）
    println("並行計算完成")

    // 測試數據
    test_data := [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
    println("開始處理數據...")
    result := process_data_parallel(test_data)
    println(`數據處理結果: ${result}`)

    numbers := [1, 2, 3, 4, 5]
    println("開始並行數據轉換...")
    doubled := transform_data(numbers, double)
    println(`轉換後的數據: ${doubled}`)

    // 並行執行可能出錯的任務
    task_a := spawn risky_task(5)
    task_b := spawn risky_task(-3)

    // 等待完成
    await task_a(), task_b()

    // 檢查結果
    if is_error(task_a) {
        println(`任務A失敗: ${task_a}`)
    } else {
        println(`任務A成功: ${task_a}`)
    }

    if is_error(task_b) {
        println(`任務B失敗: ${task_b}`)
    } else {
        println(`任務B成功: ${task_b}`)
    }

    println("全部並行測試完成")
} 