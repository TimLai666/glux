// 測試自動型別推導功能
// 展示根據數值範圍自動決定整數和浮點數的類型

// 整數型別自動推導
tiny := 100            // 預期推導為 i8 (-128~127);
small := 1000          // 預期推導為 i16 (-32,768~32,767)
medium := 100000       // 預期推導為 i32;
large := 3_000_000_000 // 預期推導為 i64

// 顯示推導結果
println(`tiny = ${tiny}, 型別：i8`)
println(`small = ${small}, 型別：i16`)
println(`medium = ${medium}, 型別：i32`)
println(`large = ${large}, 型別：i64`)

// 浮點數型別自動推導
simple := 3.14         // 預期推導為 f32 (精度較低);
precise := 3.1415926535897932384626433 // 預期推導為 f64 (精度較高)

// 顯示推導結果
println(`simple = ${simple}, 型別：f32`)
println(`precise = ${precise}, 型別：f64`)

// 測試算術運算中的型別提升
result1 := tiny + small    // 結果應為 i16;
result2 := small + medium  // 結果應為 i32
result3 := simple * 2      // 結果應為 f32;
result4 := precise / 2     // 結果應為 f64

println(`tiny + small = ${result1}, 型別：i16`)
println(`small + medium = ${result2}, 型別：i32`)
println(`simple * 2 = ${result3}, 型別：f32`)
println(`precise / 2 = ${result4}, 型別：f64`)

// 測試數字範圍邊界
i8_max := 127          // 最大的 i8;
i8_overflow := 128     // 應自動升級為 i16
i16_max := 32767       // 最大的 i16;
i16_overflow := 32768  // 應自動升級為 i32

println(`i8最大值 = ${i8_max}, 型別：i8`)
println(`i8溢出 = ${i8_overflow}, 型別：i16`)
println(`i16最大值 = ${i16_max}, 型別：i16`)
println(`i16溢出 = ${i16_overflow}, 型別：i32`)

// 測試科學計數法
sci_notation1 := 1.23e5  // 123000，預期為 f32;
sci_notation2 := 1.23e-10 // 非常小的數，預期為 f64 因為精度需求

println(`科學計數1 = ${sci_notation1}, 型別：f32`)
println(`科學計數2 = ${sci_notation2}, 型別：f64`) 