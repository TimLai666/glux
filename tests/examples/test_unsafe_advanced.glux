// 測試 unsafe 區塊的高級功能

// 正常的數學運算
x := 10
y := 20
z := x + y
println(`一般運算: ${x} + ${y} = ${z}`)

// unsafe 區塊中的位元運算
unsafe {
    // 複雜的位元運算組合
    a := 0b1010  // 二進制: 1010 (10)
    b := 0b1100  // 二進制: 1100 (12)
    
    // 組合多種位元運算
    c := (a & b) | (a ^ b)  // (a&b)=(1000), (a^b)=(0110), 結果=(1110) (14)
    println(`複雜位元運算: (${a} & ${b}) | (${a} ^ ${b}) = ${c}`)
    
    // 測試位移和位元運算組合
    d := (a << 2) & (b >> 1)  // (a<<2)=(101000), (b>>1)=(0110), 結果=(000000) (0)
    println(`位移與位元運算組合: (${a} << 2) & (${b} >> 1) = ${d}`)
    
    // 測試取反和其他運算組合
    e := ~a & b  // (~a)=(11111111111111111111111111110101), (b)=(1100), 結果=(0100) (4)
    println(`取反與位元運算組合: ~${a} & ${b} = ${e}`)
    
    // 嵌套 unsafe 區塊應該也能正常工作
    unsafe {
        f := a << 4  // 二進制: 10100000 (160)
        println(`嵌套 unsafe 區塊: ${a} << 4 = ${f}`)
    }
}

// 離開 unsafe 區塊後，以下位元運算應該報錯
// error_op := x & y  // 這應該報錯

// 測試 unsafe 區塊內可以正常進行一般運算
unsafe {
    // 正常數學運算在 unsafe 區塊中仍然有效
    m := 100
    n := 200
    o := m * n
    println(`unsafe 區塊中的一般運算: ${m} * ${n} = ${o}`)
}

println("測試完成"); 