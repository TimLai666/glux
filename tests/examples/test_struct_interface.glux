// 基本結構體
struct Person {
    Name: string,
    age: int = 18,  // 預設值
    Address: string = "未知",
}

// 繼承
struct Employee extends Person {
    override Name: string,  // 明確覆寫
    employeeId: int,
    department: string = "一般部門",
}

// 結構體方法
fn (p Person) greet() -> string {
    return `您好，我是 ${p.Name}，今年 ${p.age} 歲。`
}

fn (e Employee) greet() -> string {
    return `您好，我是 ${e.Name}，員工編號 ${e.employeeId}，所在部門：${e.department}。`
}

// 介面
interface Speaker {
    speak() -> string
}

interface Mover {
    move() -> string
}

// 擴展介面
interface Animal extends Speaker, Mover {
    eat() -> string
}

// 實現介面
struct Dog {
    name: string,
}

fn (d Dog) speak() -> string {
    return `${d.name} 說：汪汪！`
}

fn (d Dog) move() -> string {
    return `${d.name} 在跑。`
}

fn (d Dog) eat() -> string {
    return `${d.name} 在吃骨頭。`
}

// 測試結構體
p := Person { Name: "李四" }
println(p.greet())

e := Employee { 
    Name: "王五", 
    age: 30, 
    employeeId: 1001, 
    department: "研發部" 
}
println(e.greet())

// 測試介面
fn use_animal(a: Animal) {
    println(a.speak())
    println(a.move())
    println(a.eat())
}

rover := Dog { name: "Rover" }
use_animal(rover) 